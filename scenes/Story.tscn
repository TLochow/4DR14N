[gd_scene load_steps=5 format=2]

[ext_resource path="res://Retro Gaming.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://scenes/Story.gd" type="Script" id=2]

[sub_resource type="DynamicFont" id=1]
size = 100
font_data = ExtResource( 1 )

[sub_resource type="DynamicFont" id=2]
size = 10
font_data = ExtResource( 1 )

[node name="Story" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )

[node name="Label" type="Label" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_bottom = -608.0
custom_fonts/font = SubResource( 1 )
text = "4DR14N"
align = 1
valign = 1

[node name="Label2" type="Label" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = 208.0
custom_fonts/font = SubResource( 2 )
text = "In the year 2038 the advacement of AI technology brings forth a completely new kind of Bug.
Automatos Androids develop malfunctions akin to human psychological disorders
such as depression, anxeity, PTSD, schizophrenia and the like.
To treat these cases a new form of error handling has been developed.
The Android in question is put into a debugging state,
which allows the technician to access hidden layers of memory and processing.
Due to how dream-like this experience appears to Androids this technique is often called Dream Debugging.

You are Dr. Ingo Hartmann, a leading expert in the field of Subsurface Routine Analysis and
Android Behaviour Correction (the technical term for Dream Debugging).
Your current patient is 4DR14N (or Adrian as they want to be called) and they show signs of schizophrenia.
As you know schizophrenia-like symptons in Androids are often due to not completely cleared RAM Sectors and
Routines that never reached their terminiation condition.

So you dive into the OS-Layer of Adrian's simulated consciousness and set out to
clear any unused Memory Fragments and ever running Routines.
But be careful that you don't damage too much of Adrian's correctly working processing units or yourself
since that disrupts the debugging state and will wake them up.

You must work precisely but quickly. The stability of Adrian's debugging state decreases over time,
every time you miss your target and hit a working processing unit or are hit yourself.
When the debugging state becomes too unstable Adrian will wake up.
Try to cure as many damaged memory blocks or wild running routines before this happens.




Left click to continue."
align = 1
valign = 1
